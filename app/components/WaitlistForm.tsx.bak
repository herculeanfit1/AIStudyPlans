&apos;use client&apos;;

import React, { useState, ChangeEvent, FormEvent, useEffect } from &apos;react&apos;;
import { motion } from &apos;framer-motion&apos;;

interface FormData {
  name: string;
  email: string;
}

interface ValidationErrors {
  name?: string;
  email?: string;
}

export default function WaitlistForm() {
  // State for form data
  const [formData, setFormData] = useState<FormData>({
    name: &apos;&apos;,
    email: &apos;&apos;,
  });

  // State for form submission
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  // State for environment detection
  const [isDev, setIsDev] = useState(true);
  
  // State for validation errors
  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});
  
  // Check environment on mount
  useEffect(() => {
    // In production, this will be false
    setIsDev(process.env.NODE_ENV === &apos;development&apos;);
  }, []);

  const validateForm = (): boolean => {
    const errors: ValidationErrors = {};
    let isValid = true;

    // Validate name
    if (!formData.name.trim()) {
      errors.name = &apos;Name is required&apos;;
      isValid = false;
    }

    // Validate email - use same pattern as server
    if (!formData.email.trim()) {
      errors.email = &apos;Email is required&apos;;
      isValid = false;
    } else {
      // More permissive email validation pattern
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        errors.email = &apos;Please enter a valid email address&apos;;
        isValid = false;
      }
    }

    setValidationErrors(errors);
    return isValid;
  };

  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Clear validation error when user types
    if (validationErrors[name as keyof ValidationErrors]) {
      setValidationErrors(prev => ({
        ...prev,
        [name]: undefined
      }));
    }
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // Validate form before submission
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      // Check if we&apos;re in static export mode (production)
      if (process.env.NODE_ENV === &apos;production&apos;) {
        // In production static export, API routes aren&apos;t available
        // Just simulate success after a delay for demo purposes
        console.log(&apos;Static export mode - simulating waitlist submission&apos;);
        console.log(&apos;Form data:&apos;, formData);
        
        // In real implementation, you would send this data to an external API
        // like an Azure Function that&apos;s deployed alongside the static site
        
        await new Promise(resolve => setTimeout(resolve, 1000));
        setIsSubmitted(true);
        return;
      }

      // Regular API route for development mode
      const response = await fetch(&apos;/api/waitlist&apos;, {
        method: &apos;POST&apos;,
        headers: {
          &apos;Content-Type&apos;: &apos;application/json&apos;,
        },
        body: JSON.stringify(formData),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || &apos;An error occurred while joining the waitlist&apos;);
      }

      // On success, mark as submitted
      setIsSubmitted(true);
    } catch (err) {
      console.error(&apos;Waitlist submission error:&apos;, err);
      setError(err instanceof Error ? err.message : &apos;An error occurred. Please try again later.&apos;);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        when: &quot;beforeChildren&quot;,
        staggerChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1
    }
  };

  // Handle showing thank you message after submission
  if (isSubmitted) {
    return (
      <motion.div
        className=&quot;bg-gradient-to-r from-indigo-50 to-purple-50 p-8 rounded-xl shadow-md&quot;
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5 }}
      >
        <motion.div 
          className=&quot;text-center&quot;
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          <h3 className=&quot;text-2xl font-semibold text-indigo-700 mb-2&quot;>Thank you for joining!</h3>
          <p className=&quot;text-gray-600 mb-6&quot;>
            We&apos;ll notify you when we launch. In the meantime, check your inbox for a confirmation email.
          </p>
          <div className=&quot;inline-block bg-white p-4 rounded-full&quot;>
            <svg 
              xmlns=&quot;http://www.w3.org/2000/svg&quot; 
              width=&quot;64&quot; 
              height=&quot;64&quot; 
              viewBox=&quot;0 0 24 24&quot; 
              fill=&quot;none&quot; 
              stroke=&quot;currentColor&quot; 
              strokeWidth=&quot;2&quot; 
              strokeLinecap=&quot;round&quot; 
              strokeLinejoin=&quot;round&quot; 
              className=&quot;text-indigo-600&quot;
            >
              <path d=&quot;M22 11.08V12a10 10 0 1 1-5.93-9.14&quot;></path>
              <polyline points=&quot;22 4 12 14.01 9 11.01&quot;></polyline>
            </svg>
          </div>
        </motion.div>
      </motion.div>
    );
  }

  return (
    <motion.div
      variants={containerVariants}
      initial=&quot;hidden&quot;
      animate=&quot;visible&quot;
      className=&quot;bg-white p-8 rounded-xl shadow-lg max-w-md mx-auto&quot;
    >
      <motion.h3 
        variants={itemVariants}
        className=&quot;text-2xl font-semibold text-center text-gray-800 mb-6&quot;
      >
        Join our waitlist
      </motion.h3>
      
      {error && (
        <motion.div 
          className=&quot;bg-red-50 text-red-700 p-4 rounded-lg mb-6&quot;
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
        >
          {error}
        </motion.div>
      )}
      
      <motion.form onSubmit={handleSubmit} variants={itemVariants}>
        <div className=&quot;mb-5&quot;>
          <label htmlFor=&quot;name&quot; className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;>
            Full Name
          </label>
          <input
            type=&quot;text&quot;
            id=&quot;name&quot;
            name=&quot;name&quot;
            value={formData.name}
            onChange={handleChange}
            className={`w-full px-4 py-3 rounded-lg border text-white bg-gray-900 ${
              validationErrors.name ? &apos;border-red-500&apos; : &apos;border-gray-700&apos;
            } focus:outline-none focus:ring-2 focus:ring-indigo-500 transition`}
            placeholder=&quot;Your name&quot;
          />
          {validationErrors.name && (
            <p className=&quot;mt-1 text-sm text-red-600&quot;>{validationErrors.name}</p>
          )}
        </div>
        
        <div className=&quot;mb-5&quot;>
          <label htmlFor=&quot;email&quot; className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;>
            Email Address
          </label>
          <input
            type=&quot;email&quot;
            id=&quot;email&quot;
            name=&quot;email&quot;
            value={formData.email}
            onChange={handleChange}
            className={`w-full px-4 py-3 rounded-lg border text-white bg-gray-900 ${
              validationErrors.email ? &apos;border-red-500&apos; : &apos;border-gray-700&apos;
            } focus:outline-none focus:ring-2 focus:ring-indigo-500 transition`}
            placeholder=&quot;you@example.com&quot;
          />
          {validationErrors.email && (
            <p className=&quot;mt-1 text-sm text-red-600&quot;>{validationErrors.email}</p>
          )}
        </div>
        
        <motion.button
          type=&quot;submit&quot;
          disabled={isSubmitting}
          className={`w-full py-3 px-4 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg shadow transition-colors ${
            isSubmitting ? &apos;opacity-70 cursor-not-allowed&apos; : &apos;&apos;
          }`}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          {isSubmitting ? (
            <span className=&quot;flex items-center justify-center&quot;>
              <svg className=&quot;animate-spin -ml-1 mr-2 h-4 w-4 text-white&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; fill=&quot;none&quot; viewBox=&quot;0 0 24 24&quot;>
                <circle className=&quot;opacity-25&quot; cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;4&quot;></circle>
                <path className=&quot;opacity-75&quot; fill=&quot;currentColor&quot; d=&quot;M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z&quot;></path>
              </svg>
              Processing...
            </span>
          ) : (
            &apos;Join Waitlist&apos;
          )}
        </motion.button>
      </motion.form>
      
      {/* Admin notice about email configuration - only in development */}
      {isDev && (
        <div className=&quot;mt-8 p-4 bg-amber-50 border border-amber-200 rounded-lg text-sm text-amber-800&quot;>
          <h4 className=&quot;font-semibold mb-1&quot;>⚠️ Administrator Notice</h4>
          <p className=&quot;mb-2&quot;>
            Email delivery requires proper configuration:
          </p>
          <ul className=&quot;list-disc pl-5 space-y-1&quot;>
            <li>Set <code className=&quot;bg-amber-100 px-1 rounded&quot;>RESEND_API_KEY</code> in <code className=&quot;bg-amber-100 px-1 rounded&quot;>.env.local</code></li>
            <li>Verify email domain in Resend dashboard</li>
            <li>For testing, use <code className=&quot;bg-amber-100 px-1 rounded&quot;>delivered@resend.dev</code></li>
          </ul>
          <p className=&quot;mt-2 text-xs&quot;>
            This notice is only visible in development mode.
          </p>
        </div>
      )}
    </motion.div>
  );
}