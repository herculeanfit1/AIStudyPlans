&apos;use client&apos;;

import { useEffect, useState, useRef } from &apos;react&apos;;

export default function HowItWorks() {
  const [activeStep, setActiveStep] = useState(0);
  const stepsRef = useRef<HTMLDivElement>(null);
  
  const steps = [
    {
      number: 1,
      title: &quot;Create Your Profile&quot;,
      description: &quot;Tell us about your learning style, time availability, and current knowledge level to help us understand your unique needs.&quot;,
      icon: &quot;fa-user-plus&quot;
    },
    {
      number: 2,
      title: &quot;Select Your Subjects&quot;,
      description: &quot;Choose the subjects you want to learn and set specific learning goals to focus your study plans on what matters most to you.&quot;,
      icon: &quot;fa-book-open&quot;
    },
    {
      number: 3,
      title: &quot;Generate Your Plan&quot;,
      description: &quot;Our AI engine creates a personalized study plan optimized for your success, with the right balance of materials and activities.&quot;,
      icon: &quot;fa-wand-magic-sparkles&quot;
    },
    {
      number: 4,
      title: &quot;Track & Adapt&quot;,
      description: &quot;Follow your plan, track your progress, and watch as our AI adapts your study schedule based on your performance and feedback.&quot;,
      icon: &quot;fa-chart-line&quot;
    }
  ];

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          // Start animation when section comes into view
          const interval = setInterval(() => {
            setActiveStep((prev) => {
              const next = (prev + 1) % steps.length;
              return next;
            });
          }, 3000);
          
          return () => clearInterval(interval);
        }
      },
      { threshold: 0.2 }
    );
    
    if (stepsRef.current) {
      observer.observe(stepsRef.current);
    }
    
    return () => {
      if (stepsRef.current) {
        observer.unobserve(stepsRef.current);
      }
    };
  }, [steps.length]);

  return (
    <section id=&quot;how-it-works&quot; className=&quot;py-16 md:py-24 bg-indigo-50&quot;>
      <div className=&quot;container mx-auto px-4&quot;>
        <div className=&quot;text-center mb-16&quot;>
          <h2 className=&quot;text-3xl md:text-4xl font-bold text-gray-800 mb-4&quot;>How SchedulEd Works</h2>
          <p className=&quot;text-xl text-gray-600 max-w-3xl mx-auto&quot;>
            Getting started is easy with our simple four-step process
          </p>
        </div>
        
        <div className=&quot;relative max-w-5xl mx-auto&quot; ref={stepsRef}>
          {/* Connector line (desktop only) */}
          <div className=&quot;hidden md:block absolute top-8 left-0 w-full h-1 bg-indigo-100 z-0&quot;>
            <div 
              className=&quot;absolute top-0 left-0 h-full bg-indigo-500 transition-all duration-500 ease-in-out&quot;
              style={{ width: `${(activeStep / (steps.length - 1)) * 100}%` }}
            ></div>
          </div>
          
          <div className=&quot;grid md:grid-cols-4 gap-8&quot;>
            {steps.map((step, index) => (
              <div 
                key={step.number} 
                className={`relative z-10 transform transition-all duration-500 ${
                  index === activeStep ? &apos;scale-105&apos; : &apos;scale-100&apos;
                }`}
                onClick={() => setActiveStep(index)}
              >
                <div className={`flex flex-col items-center cursor-pointer ${
                  index <= activeStep ? &apos;opacity-100&apos; : &apos;opacity-60&apos;
                }`}>
                  <div className={`w-16 h-16 rounded-full flex items-center justify-center text-white text-xl mb-6 transition-all duration-300 ${
                    index <= activeStep ? &apos;bg-indigo-600&apos; : &apos;bg-indigo-300&apos;
                  }`}>
                    <i className={`fas ${step.icon}`}></i>
                  </div>
                  <h3 className={`text-xl font-semibold mb-3 text-center transition-colors duration-300 ${
                    index <= activeStep ? &apos;text-gray-900&apos; : &apos;text-gray-600&apos;
                  }`}>
                    {step.title}
                  </h3>
                  <p className=&quot;text-gray-600 text-center&quot;>
                    {step.description}
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          <div className=&quot;flex justify-center mt-12&quot;>
            <div className=&quot;flex space-x-2&quot;>
              {steps.map((_, index) => (
                <button
                  key={index}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    index === activeStep ? &apos;bg-indigo-600 w-6&apos; : &apos;bg-indigo-200&apos;
                  }`}
                  onClick={() => setActiveStep(index)}
                  aria-label={`Go to step ${index + 1}`}
                ></button>
              ))}
            </div>
          </div>
        </div>
        
        <div className=&quot;text-center mt-12&quot;>
          <a
            href=&quot;#waitlist&quot;
            className=&quot;inline-block bg-indigo-600 text-white px-6 py-3 rounded-md font-medium hover:bg-indigo-700 transition-colors&quot;
          >
            Get Started Now
          </a>
        </div>
      </div>
    </section>
  );
} 