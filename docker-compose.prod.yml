services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - RESEND_API_KEY=${RESEND_API_KEY}
      - EMAIL_FROM=${EMAIL_FROM:-SchedulEd <noreply@aistudyplans.com>}
      - EMAIL_REPLY_TO=${EMAIL_REPLY_TO:-support@aistudyplans.com}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-https://aistudyplans.com}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # For enhanced security in production
    security_opt:
      - no-new-privileges:true
    # If using Docker Swarm or Kubernetes
    # deploy:
    #   replicas: 2
    #   update_config:
    #     parallelism: 1
    #     delay: 10s
    #     order: start-first
    #   restart_policy:
    #     condition: on-failure
    #     max_attempts: 3
    #     window: 120s

  # Optional reverse proxy for production
  nginx:
    image: nginx:alpine
    restart: always
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SSL certificate management with Let's Encrypt
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx

networks:
  default:
    name: aistudyplans_prod_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16 