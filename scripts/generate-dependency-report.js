#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Simple color utility to avoid chalk ES module issues
const colors = {
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  gray: (text) => `\x1b[90m${text}\x1b[0m`,
  cyan: (text) => `\x1b[36m${text}\x1b[0m`
};

class DependencyReportGenerator {
  constructor() {
    this.projectRoot = process.cwd();
    this.reportPath = path.join(this.projectRoot, 'dependency-report.md');
  }

  async generateReport() {
    console.log(colors.blue('📊 Generating Comprehensive Dependency Report...'));
    
    try {
      const reportData = await this.collectReportData();
      const markdownReport = this.generateMarkdownReport(reportData);
      
      fs.writeFileSync(this.reportPath, markdownReport);
      console.log(colors.green(`✅ Report generated: ${this.reportPath}`));
      
      return reportData;
    } catch (error) {
      console.error(colors.red('❌ Report generation failed:'), error.message);
      return null;
    }
  }

  async collectReportData() {
    const packageJson = JSON.parse(fs.readFileSync(path.join(this.projectRoot, 'package.json'), 'utf8'));
    
    // Load status data if available
    let statusData = null;
    const statusFile = path.join(this.projectRoot, '.dependency-status.json');
    if (fs.existsSync(statusFile)) {
      statusData = JSON.parse(fs.readFileSync(statusFile, 'utf8'));
    }
    
    // Load audit data if available
    let auditData = null;
    const auditFile = path.join(this.projectRoot, '.security-audit.json');
    if (fs.existsSync(auditFile)) {
      auditData = JSON.parse(fs.readFileSync(auditFile, 'utf8'));
    }
    
    return {
      projectName: packageJson.name,
      version: packageJson.version,
      nodeVersion: packageJson.engines?.node || 'Not specified',
      npmVersion: packageJson.engines?.npm || 'Not specified',
      dependencies: packageJson.dependencies || {},
      devDependencies: packageJson.devDependencies || {},
      scripts: packageJson.scripts || {},
      statusData,
      auditData,
      generatedAt: new Date().toISOString()
    };
  }

  generateMarkdownReport(data) {
    const report = `# 📊 Dependency Report

**Project:** ${data.projectName}  
**Version:** ${data.version}  
**Generated:** ${new Date(data.generatedAt).toLocaleString()}

## 🎯 Executive Summary

- **Total Dependencies:** ${Object.keys(data.dependencies).length}
- **Dev Dependencies:** ${Object.keys(data.devDependencies).length}
- **Node.js Version:** ${data.nodeVersion}
- **NPM Version:** ${data.npmVersion}

${data.statusData ? this.generateStatusSection(data.statusData) : ''}

${data.auditData ? this.generateSecuritySection(data.auditData) : ''}

## 📦 Production Dependencies

${this.generateDependencyTable(data.dependencies)}

## 🛠️ Development Dependencies

${this.generateDependencyTable(data.devDependencies)}

## 🔧 Available Scripts

${this.generateScriptsTable(data.scripts)}

## 📋 Maintenance Recommendations

### Weekly Tasks (5 minutes)
1. Run \`npm run lock:check\` to verify dependency status
2. Review any security alerts
3. Update dependencies if needed

### Monthly Tasks (15 minutes)
1. Run \`npm run lock:audit\` for comprehensive security scan
2. Review and update outdated dependencies
3. Generate fresh dependency report

### Quarterly Tasks (30 minutes)
1. Review all dependencies for necessity
2. Update Node.js and npm versions if needed
3. Audit and optimize dependency tree

## 🛠️ Dependency Management Commands

| Command | Purpose | Frequency |
|---------|---------|-----------|
| \`npm run lock:check\` | Quick status check | Weekly |
| \`npm run lock:audit\` | Security scan | Weekly |
| \`npm run lock:fix\` | Auto-fix issues | As needed |
| \`npm run lock:update\` | Safe updates | Monthly |
| \`npm run lock:report\` | Generate report | Monthly |
| \`npm run maintenance:weekly\` | Full weekly check | Weekly |

---

*Report generated by AIStudyPlans Dependency Management System*
`;

    return report;
  }

  generateStatusSection(statusData) {
    return `
## 📊 Current Status

- **Last Status Check:** ${new Date(statusData.timestamp).toLocaleString()}
- **Outdated Packages:** ${statusData.outdatedCount || 0}
- **Security Vulnerabilities:** ${statusData.vulnerabilityCount || 0}
- **Lock File Valid:** ${statusData.lockFileValid ? '✅ Yes' : '❌ No'}

### Recommendations
${statusData.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No recommendations available'}
`;
  }

  generateSecuritySection(auditData) {
    return `
## 🔒 Security Status

- **Risk Level:** ${auditData.riskLevel?.toUpperCase() || 'Unknown'}
- **Last Security Audit:** ${new Date(auditData.timestamp).toLocaleString()}
- **Custom Security Checks:** ${auditData.customChecks?.length || 0} issues found

### Security Recommendations
${auditData.recommendations?.map(rec => `- ${rec}`).join('\n') || 'No security recommendations available'}
`;
  }

  generateDependencyTable(dependencies) {
    if (Object.keys(dependencies).length === 0) {
      return '*No dependencies*';
    }

    const rows = Object.entries(dependencies).map(([name, version]) => {
      return `| ${name} | ${version} |`;
    });

    return `| Package | Version |
|---------|---------|
${rows.join('\n')}`;
  }

  generateScriptsTable(scripts) {
    const lockScripts = Object.entries(scripts)
      .filter(([name]) => name.startsWith('lock:') || name.includes('maintenance'))
      .map(([name, command]) => `| ${name} | ${command} |`);

    if (lockScripts.length === 0) {
      return '*No dependency management scripts found*';
    }

    return `| Script | Command |
|--------|---------|
${lockScripts.join('\n')}`;
  }
}

// Generate report
if (require.main === module) {
  const generator = new DependencyReportGenerator();
  generator.generateReport();
}

module.exports = DependencyReportGenerator; 