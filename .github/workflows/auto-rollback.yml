name: Automated Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      version:
        description: 'Version to rollback to (leave empty for previous version)'
        required: false
        type: string

jobs:
  identify-version:
    name: Identify Rollback Version
    runs-on: ubuntu-latest
    outputs:
      rollback_tag: ${{ steps.set-version.outputs.rollback_tag }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set rollback version
        id: set-version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "" ]]; then
            # Use specified version
            ROLLBACK_TAG="${{ github.event.inputs.version }}"
          else
            # Get deployment history
            ENV="${{ github.event.inputs.environment }}"
            echo "Retrieving deployment history for $ENV environment..."
            
            # List recent tags with environment prefix, sort by date, and get the second most recent (previous to current)
            ALL_TAGS=$(gh api -H "Accept: application/vnd.github+json" /user/packages/container/aistudyplans/versions | jq -r '.[] | select(.metadata.container.tags[] | contains("'$ENV'")) | .metadata.container.tags[0] + " " + .created_at' | sort -k2 -r)
            
            if [[ -z "$ALL_TAGS" ]]; then
              echo "No deployment history found for $ENV environment"
              exit 1
            fi
            
            # Get the second tag (previous to current)
            ROLLBACK_TAG=$(echo "$ALL_TAGS" | sed -n '2p' | cut -d ' ' -f 1)
            
            if [[ -z "$ROLLBACK_TAG" ]]; then
              echo "No previous version found to rollback to"
              exit 1
            fi
          fi
          
          echo "rollback_tag=$ROLLBACK_TAG" >> $GITHUB_OUTPUT
          echo "Will rollback to: $ROLLBACK_TAG"
  
  rollback:
    name: Rollback ${{ github.event.inputs.environment }} to ${{ needs.identify-version.outputs.rollback_tag }}
    needs: identify-version
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy previous version
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"
          api_location: "api"
          output_location: "out"
          deployment_environment: ${{ github.event.inputs.environment }}
          app_build_command: |
            docker pull ${{ needs.identify-version.outputs.rollback_tag }}
            docker create --name extractor ${{ needs.identify-version.outputs.rollback_tag }}
            docker cp extractor:/app/out ./out
            docker rm extractor
      
      - name: Notify rollback
        if: success()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîÑ Rollback completed for ${{ github.event.inputs.environment }}',
              body: `
              # Rollback Completed
              
              Environment: **${{ github.event.inputs.environment }}**
              Rolled back to: **${{ needs.identify-version.outputs.rollback_tag }}**
              Performed by: **${context.actor}**
              Date: **${new Date().toISOString()}**
              
              ## Next Steps
              - Investigate what went wrong with the previous deployment
              - Fix the issues and redeploy when ready
              `
            });
            
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.data.number,
              labels: ['rollback', 'ops', '${{ github.event.inputs.environment }}']
            });
      
      - name: Notify rollback failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚ùå Rollback FAILED for ${{ github.event.inputs.environment }}',
              body: `
              # Rollback Failed
              
              Environment: **${{ github.event.inputs.environment }}**
              Attempted to roll back to: **${{ needs.identify-version.outputs.rollback_tag }}**
              Performed by: **${context.actor}**
              Date: **${new Date().toISOString()}**
              
              ## Required Actions
              - Check the workflow logs for details on why the rollback failed
              - Manual intervention might be required to restore service
              
              cc @${context.repo.owner}
              `
            }); 