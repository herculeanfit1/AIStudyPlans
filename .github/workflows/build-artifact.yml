name: Build Application Artifact

on:
  push:
    branches: ['main', 'develop', 'feature/*']
  pull_request:
    branches: ['main', 'develop']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to build for'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  build:
    name: Build and Store Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Configure environment variables
        id: vars
        run: |
          echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_OUTPUT
          
          # Determine environment from inputs or branch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${GITHUB_REF#refs/heads/}" == "main" ]]; then
            ENVIRONMENT="production"
          elif [[ "${GITHUB_REF#refs/heads/}" == "develop" ]]; then
            ENVIRONMENT="staging"
          else
            ENVIRONMENT="development"
          fi
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_OUTPUT
      
      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short
            ${{ steps.vars.outputs.ENVIRONMENT }}-${{ steps.vars.outputs.SHORT_SHA }}
      
      # Create .env file for the specified environment
      - name: Create environment file
        run: |
          ENV_NAME="${{ steps.vars.outputs.ENVIRONMENT }}"
          echo "Creating .env file for $ENV_NAME"
          
          # Create basic environment settings
          cat > .env.$ENV_NAME << EOF
          NODE_ENV=$ENV_NAME
          EOF
          
          # Add Supabase settings
          if [[ -n "${{ secrets[format('NEXT_PUBLIC_SUPABASE_URL_{0}', steps.vars.outputs.ENVIRONMENT)] }}" ]]; then
            echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets[format('NEXT_PUBLIC_SUPABASE_URL_{0}', steps.vars.outputs.ENVIRONMENT)] }}" >> .env.$ENV_NAME
          fi
          
          if [[ -n "${{ secrets[format('NEXT_PUBLIC_SUPABASE_ANON_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" ]]; then
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets[format('NEXT_PUBLIC_SUPABASE_ANON_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" >> .env.$ENV_NAME
          fi
          
          if [[ -n "${{ secrets[format('SUPABASE_SERVICE_ROLE_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" ]]; then
            echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets[format('SUPABASE_SERVICE_ROLE_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" >> .env.$ENV_NAME
          fi
          
          # Add Email settings
          if [[ -n "${{ secrets[format('RESEND_API_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" ]]; then
            echo "RESEND_API_KEY=${{ secrets[format('RESEND_API_KEY_{0}', steps.vars.outputs.ENVIRONMENT)] }}" >> .env.$ENV_NAME
          fi
          
          # Add application URL
          if [[ "$ENV_NAME" == "production" ]]; then
            echo "NEXT_PUBLIC_APP_URL=https://aistudyplans.com" >> .env.$ENV_NAME
            echo "EMAIL_FROM=noreply@aistudyplans.com" >> .env.$ENV_NAME
          elif [[ "$ENV_NAME" == "staging" ]]; then
            echo "NEXT_PUBLIC_APP_URL=https://staging-aistudyplans.azurewebsites.net" >> .env.$ENV_NAME
            echo "EMAIL_FROM=noreply-staging@aistudyplans.com" >> .env.$ENV_NAME
          else
            echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.$ENV_NAME
            echo "EMAIL_FROM=noreply-dev@aistudyplans.com" >> .env.$ENV_NAME
          fi
          
          # Enable feature flags
          echo "ENABLE_FEEDBACK_CAMPAIGN=true" >> .env.$ENV_NAME
          echo "ENABLE_WAITLIST=true" >> .env.$ENV_NAME
          
          # Display non-sensitive environment variables
          echo "Created environment file (showing non-sensitive values):"
          grep -v "KEY\|SECRET\|PASSWORD" .env.$ENV_NAME || true
      
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            NODE_ENV=${{ steps.vars.outputs.ENVIRONMENT }}
            ENVIRONMENT_FILE=.env.${{ steps.vars.outputs.ENVIRONMENT }}
      
      # Save image digest for later use in deployments
      - name: Save image digest
        if: github.event_name != 'pull_request'
        run: |
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' > image-tags.txt
          echo "${{ steps.meta.outputs.digest }}" > image-digest.txt
      
      - name: Upload image information
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-info-${{ steps.vars.outputs.ENVIRONMENT }}
          path: |
            image-tags.txt
            image-digest.txt
          retention-days: 7
      
      # This is a workaround to prevent cache from growing too large
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      # Run security scanning on the built image
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'table'
          exit-code: '0'  # Don't fail the build yet, just report
          severity: 'CRITICAL,HIGH'
      
      # Record build metrics
      - name: Record build metrics
        run: |
          BUILD_DURATION=${{ steps.build.outputs.duration }}
          echo "Build duration: $BUILD_DURATION seconds"
          echo "Environment: ${{ steps.vars.outputs.ENVIRONMENT }}"
          echo "Branch: ${{ steps.vars.outputs.BRANCH_NAME }}"
          echo "Commit: ${{ steps.vars.outputs.SHORT_SHA }}"
          echo "Build timestamp: ${{ steps.vars.outputs.TIMESTAMP }}" 