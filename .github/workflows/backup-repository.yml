name: Backup Repository

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: source-repo
          
      - name: Debug Environment
        run: |
          echo "Running backup workflow on branch: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Target Repository: herculeanfit1/AIStudyPlans-Backups"
          
      - name: Check App ID Secret
        run: |
          if [[ -z "${{ secrets.BACKUP_APP_ID }}" ]]; then
            echo "❌ BACKUP_APP_ID secret is not set!"
            exit 1
          else
            echo "✅ BACKUP_APP_ID secret is configured"
            echo "App ID should be 1243050"
          fi
          
      - name: Check Private Key Secret
        run: |
          if [[ -z "${{ secrets.BACKUP_APP_PRIVATE_KEY }}" ]]; then
            echo "❌ BACKUP_APP_PRIVATE_KEY secret is not set!"
            exit 1
          else
            # Check if it has the proper format (starts with BEGIN line)
            if [[ "${{ secrets.BACKUP_APP_PRIVATE_KEY }}" == *"BEGIN"* ]]; then
              echo "✅ BACKUP_APP_PRIVATE_KEY appears to be properly formatted (starts with BEGIN)"
              echo "✓ Private key length: $(echo "${{ secrets.BACKUP_APP_PRIVATE_KEY }}" | wc -c) characters"
              
              # Check for newlines (indirectly)
              if [[ $(echo "${{ secrets.BACKUP_APP_PRIVATE_KEY }}" | grep -c "END") -gt 0 ]]; then
                echo "✓ Private key appears to contain END marker"
              else
                echo "⚠️ Private key might be missing END marker or newlines"
              fi
            else
              echo "⚠️ BACKUP_APP_PRIVATE_KEY may not be properly formatted. Ensure it contains BEGIN/END lines"
              exit 1
            fi
          fi
          
      - name: Generate GitHub App token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BACKUP_APP_ID }}
          private-key: ${{ secrets.BACKUP_APP_PRIVATE_KEY }}
          owner: herculeanfit1
          repositories: AIStudyPlans-Backups
           
      - name: Verify generated token
        run: |
          if [[ -z "${{ steps.generate-token.outputs.token }}" ]]; then
            echo "❌ Failed to generate GitHub App token!"
            exit 1
          else
            echo "✅ GitHub App token generated successfully"
            echo "✓ Token length: ${#TOKEN} characters" 
            # Print first 4 characters of token (safe to show)
            echo "✓ Token starts with: ${TOKEN:0:4}..."
          fi
        env:
          TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Test API access with token
        run: |
          echo "Testing GitHub API access with token..."
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ steps.generate-token.outputs.token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/herculeanfit1/AIStudyPlans-Backups)
            
          echo "API Response Status: $STATUS"
          
          if [[ "$STATUS" == "200" ]]; then
            echo "✅ Successfully authenticated to GitHub API"
          else
            echo "❌ Failed to authenticate to GitHub API - Status: $STATUS"
            echo "This suggests the token has invalid permissions or scope"
            exit 1
          fi

      - name: Backup to secondary repository
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          cd source-repo
          
          # Configure Git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Create a temporary directory for the filtered content
          mkdir -p ../filtered-repo
          
          # Copy everything except .github directory to the filtered directory
          rsync -av --exclude='.github' ./ ../filtered-repo/
          
          # Add a special .gitignore to the backup repo to prevent workflow triggers
          echo "# Ignore GitHub workflows to prevent duplicate runs" > ../filtered-repo/.github-actions-ignore
          echo ".github/" >> ../filtered-repo/.github-actions-ignore
          
          # Set up the new remote repository
          cd ../filtered-repo
          git init
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Backup from main repository - $(date)"
          
          # Test access with a simple operation before pushing
          echo "Testing repository access with token..."
          GIT_TRACE=2 git ls-remote --exit-code https://${GH_TOKEN}@github.com/herculeanfit1/AIStudyPlans-Backups.git
          
          if [ $? -ne 0 ]; then
            echo "❌ Cannot access repository with token - authentication issue!"
            exit 1
          else
            echo "✅ Repository access with token successful"
          fi
          
          # Show the repo URL we're pushing to (with token masked)
          echo "Pushing to: https://***@github.com/herculeanfit1/AIStudyPlans-Backups.git"
          
          # Push to backup repository (force to overwrite history)
          git remote add backup https://${GH_TOKEN}@github.com/herculeanfit1/AIStudyPlans-Backups.git
          git push backup main:main --force
