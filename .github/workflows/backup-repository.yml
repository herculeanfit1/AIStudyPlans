name: Backup to Separate Repository

on:
  workflow_run:
    workflows: ["Azure Static Web Apps CI/CD"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  backup:
    runs-on: ubuntu-latest
    name: Backup Repository
    # Only run if the Azure workflow completed successfully
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source-repo

      - name: Debug Secrets
        run: |
          echo "BACKUP_REPO is set: ${{ secrets.BACKUP_REPO != '' }}"
          echo "BACKUP_PAT is set: ${{ secrets.BACKUP_PAT != '' }}"
          
          # Check if BACKUP_REPO secret is actually set
          if [ "${{ secrets.BACKUP_REPO != '' }}" = "true" ]; then
            # Print first character and length to diagnose format issues
            REPO_LENGTH=$(echo "${{ secrets.BACKUP_REPO }}" | wc -c)
            FIRST_CHAR=$(echo "${{ secrets.BACKUP_REPO }}" | cut -c1)
            LAST_CHAR=$(echo "${{ secrets.BACKUP_REPO }}" | cut -c$((REPO_LENGTH-1)))
            echo "BACKUP_REPO format check: starts with '${FIRST_CHAR}', ends with '${LAST_CHAR}', length: ${REPO_LENGTH} chars"
            
            # Check if it contains a slash (username/repo format)
            if echo "${{ secrets.BACKUP_REPO }}" | grep -q "/"; then
              echo "BACKUP_REPO contains a slash - good format"
            else
              echo "BACKUP_REPO does NOT contain a slash - BAD FORMAT, should be 'username/repository'"
            fi
          else
            echo "BACKUP_REPO is not set correctly!"
          fi

      - name: Push to Backup Repository
        run: |
          cd source-repo
          
          # Configure Git
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          
          # Create a temporary directory for the filtered content
          mkdir -p ../filtered-repo
          
          # Copy everything except .github directory to the filtered directory
          rsync -av --exclude='.github' ./ ../filtered-repo/
          
          # Add a special .gitignore to the backup repo to prevent workflow triggers
          echo "# Ignore GitHub workflows to prevent duplicate runs" > ../filtered-repo/.github-actions-ignore
          echo ".github/" >> ../filtered-repo/.github-actions-ignore
          
          # Set up the new remote repository
          cd ../filtered-repo
          git init
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git add .
          git commit -m "Backup from main repository - $(date)"
          
          # Show the repo URL we're pushing to (with any token part masked)
          echo "Backup Repository value: [${{ secrets.BACKUP_REPO }}]"
          echo "Pushing to: https://[token]@github.com/${{ secrets.BACKUP_REPO }}.git"
          
          # Push to backup repository (force to overwrite history)
          git remote add backup https://${{ secrets.BACKUP_PAT }}@github.com/${{ secrets.BACKUP_REPO }}.git
          git push backup main:main --force 